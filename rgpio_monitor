#!/bin/sh
### BEGIN INIT INFO
# Short-Description: Monitors RemoteGPIO dbus Service
# Description:       Allow stoping and starting RemoteGPIO service from victron GUI
# Description: 	     It also manage the reboot of the Dingtian devices	
# Description:	     Also keep units.conf up to date so it creates the gpio at boot time
## END INIT INFO

exec 2>&1

get_setting()
	{
		dbus-send --print-reply=literal --system --type=method_call --dest=com.victronenergy.settings $1 com.victronenergy.BusItem.GetValue | awk '/int32/ { print $3 }'
	}

set_setting()                                                                                                                                                                     
    {                                                                                                                                                                         
		dbus-send --print-reply=literal --system --type=method_call --dest=com.victronenergy.settings $1 com.victronenergy.BusItem.SetValue $2  
    }

get_IP()
	{                                                                                                                                                                                                                               
        	dbus-send --print-reply=literal --system --type=method_call --dest=com.victronenergy.settings $1 com.victronenergy.BusItem.GetValue | awk '/variant/ { print $2 }'                                                                      
	} 

latch=0
timer=$(date +%s)



while true
do
	service=$(get_setting /Settings/Services/RemoteGPIO)

	case $service in
		0)
			##
			## Stop Service
			###################
			if [ $service != $latch ]
			then
				svc -d /service/rgpio_driver
				echo "rgpio_driver: Stopping RemoteGPIO driver" >> /var/log/RemoteGPIO/current
				#set_setting /Settings/RemoteGPIO/NumberUnits variant:int32:0
				/etc/rcS.d/S90rgpio_pins.sh
				#svc -t /service/dbus-systemcalc-py
				#svc -t /service/dbus-digitalinputs/
			fi
			latch=$((service))
			;;

		1)
            ##
			## Start Service
			###########################
			if [ $service != $latch ]
                        then
                                svc -u /service/rgpio_driver
                                echo "rgpio_driver: Starting RemoteGPIO driver" >> /var/log/RemoteGPIO/current
								/etc/rcS.d/S90rgpio_pins.sh
			fi
			latch=$((service))
			;;
		2)
			##
			## Reboot device
            ###########################
			if [ $service != $latch ]
            then
				Reboot_Unit1=$(get_setting /Settings/RemoteGPIO/Unit1/Reboot)
                Reboot_Unit2=$(get_setting /Settings/RemoteGPIO/Unit2/Reboot)
				Reboot_Unit3=$(get_setting /Settings/RemoteGPIO/Unit3/Reboot)
				
				if [ $Reboot_Unit1 = 1 ] 
				##
				## Reboot Unit1
				#####################
				then
					IP_Unit1=$(get_IP /Settings/RemoteGPIO/Unit1/IP)
					wget http://$IP_Unit1/reboot.cgi
					# Clear reboot flag and put RemoteGPIO service to 1
					set_setting /Settings/RemoteGPIO/Unit1/Reboot variant:int32:0
					set_setting /Settings/Services/RemoteGPIO variant:int32:1
				fi

                if [ $Reboot_Unit2 = 1 ]                                                                                                                                                                                      
				##
				## Reboot Unit 2
                ####################
				then                                                                                                                                                                                                          
                	IP_Unit2=$(get_IP /Settings/RemoteGPIO/Unit2/IP)                                                                                                                                                      
                    wget http://$IP_Unit2/reboot.cgi  
                    # Clear reboot flag and put RemoteGPIO service to 1          
                    set_setting /Settings/RemoteGPIO/Unit2/Reboot variant:int32:0
                    set_setting /Settings/Services/RemoteGPIO variant:int32:1
            	fi                                                                                             

				      
				if [ $Reboot_Unit3 = 1 ]                                                                                                                                                                                      
				##
				## Reboot Unit 3
                ####################
				then                                                                                                                                                                                                          
                	IP_Unit3=$(get_IP /Settings/RemoteGPIO/Unit3/IP)                                                                                                                                                      
                    wget http://$IP_Unit3/reboot.cgi  
                    # Clear reboot flag and put RemoteGPIO service to 1          
                    set_setting /Settings/RemoteGPIO/Unit3/Reboot variant:int32:0
                    set_setting /Settings/Services/RemoteGPIO variant:int32:1
            	fi                                                                                                            
			fi
			#latch=$((service))
			;;	
		3)
			##
			## Restart Service
			###########################
			if [ $service != $latch ]
                then
                    svc -t /service/rgpio_driver
                    echo "rgpio_driver: Restarting RemoteGPIO driver" >> /var/log/RemoteGPIO/current
					/etc/rcS.d/S90rgpio_pins.sh
					set_setting /Settings/Services/RemoteGPIO variant:int32:1
					set_setting /Settings/RemoteGPIO/Restart variant:int32:0
			fi
			#latch=$((service))
			;;
	esac

    ##                                                        
    ## Watchdog                                                              
    ################################                                                                                                        
    if (( (timer + 10) < $(date +%s) ))                                       
        then                                        
			watchdog=$(get_setting /Settings/Watchdog/RemoteGPIO)
            timer=$(date +%s)                                                                                                                                  
		if (( (watchdog + 10) < timer && service == 1 ))
			then
				echo "rgpio_driver: RemoteGPIO driver restart triggered by watchdog" >> /var/log/RemoteGPIO/current
				svc -d /service/rgpio_driver ; svc -u /service/rgpio_driver
		fi
        echo "Heartbeat = "$(date -d@$timer)
    fi                                               


	##
	## Latency vs CPU load
	#################################
    sleep 3
done
