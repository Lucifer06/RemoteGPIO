--- serial-starter.rules.322	2024-02-26 05:43:09.000000000 -0700
+++ serial-starter.rules	2024-03-16 16:59:04.067739100 -0700
@@ -1,6 +1,23 @@
+# ** RemoteGPIO **
+#
+# There are 2x possible strategies:
+# 1/ With generic USB to RS485 interface that is not possible to reprogram such as the ones based on CH340 chipset
+# => The strategy is to lock down to the position in the USB interface. You will need to update ENV{ID_PATH_TAG} if you hook up a USB hub in between.
+# Serial-starter to ignore the USB-RS485 converter attached to the first USB port so USB interface for RGPIO works
+#
+#ACTION=="add", ENV{ID_BUS}=="usb", ENV{ID_PATH_TAG}=="platform-1c14400_usb-usb-0_1_1_0", ENV{VE_SERVICE}="ignore"
+#
+# 2/ With FTDI based USB to RS485 interface, it is possible to reprogram it and allow us to identify it. We recommend to go with TF232R chipset based.
+# Instructions on how to reprogram the USB adapter are provided here: https://community.victronenergy.com/questions/245584/remotegpio-ex-venus-rgpio-now-available-with-setup.html
+# => The strategy is to identify the ID_Model with "RemoteGPIO"
+#
+ACTION=="add", ENV{ID_BUS}=="usb", ENV{ID_MODEL}=="RemoteGPIO", ENV{VE_SERVICE}="ignore"
+#
+# ** RemoteGPIO **
+
 ACTION=="add", SUBSYSTEM=="tty", SUBSYSTEMS=="platform|usb-serial", SYMLINK+="serial-starter/%k"
 ACTION=="remove", SUBSYSTEM=="tty", SUBSYSTEMS=="platform|usb-serial", RUN+="/opt/victronenergy/serial-starter/cleanup.sh %k"
 
 # The VE USB RS485 has a FT232R, but that chip can also rs232 etc, so also check default
 ACTION=="add", ENV{ID_BUS}=="usb", ENV{ID_MODEL}=="FT232R_USB_UART",            ENV{VE_SERVICE}="rs485:default"
 # Older versions have specific id_model so that is rs485 for sure
